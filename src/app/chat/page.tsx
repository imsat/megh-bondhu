"use client"

import { useState, useRef, useEffect } from "react"
import { Send, Cloud } from "lucide-react"

interface Message {
    id: string
    type: "bot" | "user"
    content: string
    options?: Array<{ label: string; action: string }>
}

const MENU_OPTIONS = [
    { label: "ЁЯМбя╕П ржЖржЬржХрзЗрж░ ржЖржмрж╣рж╛ржУржпрж╝рж╛", action: "current_weather" },
    { label: "ЁЯУЕ ржнржмрж┐рж╖рзНржпрждрзЗрж░ ржЖржмрж╣рж╛ржУржпрж╝рж╛", action: "forecast" },
    { label: "ЁЯУЪ рж╕ржЪрзЗрждржирждрж╛", action: "awareness" },
    { label: "ЁЯПе ржХрзНрж▓рж┐ржирж┐ржХ ржЦрзБржБржЬрзБржи", action: "clinics" },
    // { label: "тЭУ FAQs", action: "faqs" },
]

const AWARENESS_OPTIONS = [
    { label: "ЁЯМК ржмржирзНржпрж╛ рж╕ржЪрзЗрждржирждрж╛", action: "flood" },
    { label: "ЁЯМкя╕П ржШрзВрж░рзНржгрж┐ржЭржбрж╝ рж╕ржЪрзЗрждржирждрж╛", action: "cyclone" },
    { label: "ЁЯФе рждрж╛ржкржкрзНрж░ржмрж╛рж╣ рж╕ржЪрзЗрждржирждрж╛", action: "heatwave" },
]

const FAQ_OPTIONS = [
    { label: "ржорзЗржШржмржирзНржзрзБ ржХрж┐?", action: "faq_about" },
    { label: "ржбрзЗржЯрж╛ ржХрзЛржерж╛ ржерзЗржХрзЗ ржЖрж╕рзЗ?", action: "faq_data" },
    { label: "ржХрж┐ржнрж╛ржмрзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░ржм?", action: "faq_contact" },
]

export default function Chat() {
    const [messages, setMessages] = useState<Message[]>([
        {
            id: "1",
            type: "bot",
            content: "рж╕рзНржмрж╛ржЧрждржо! ЁЯСЛ ржЖржорж┐ ржорзЗржШржмржирзНржзрзБ ржмржЯред ржЖржкржирж┐ ржХрзА ржЬрж╛ржирждрзЗ ржЪрж╛ржи?",
            options: MENU_OPTIONS,
        },
    ])
    const [input, setInput] = useState("")
    const [loading, setLoading] = useState(false)
    const messagesEndRef = useRef<HTMLDivElement>(null)

    const scrollToBottom = () => {
        messagesEndRef.current?.scrollIntoView({ behavior: "smooth" })
    }

    useEffect(() => {
        scrollToBottom()
    }, [messages])

    const handleOptionClick = async (action: string) => {
        const userMessage: Message = {
            id: Date.now().toString(),
            type: "user",
            content: action,
        }

        setMessages((prev) => [...prev, userMessage])
        setLoading(true)

        // Simulate bot response delay
        setTimeout(() => {
            let botResponse: Message

            switch (action) {
                case "current_weather":
                    botResponse = {
                        id: (Date.now() + 1).toString(),
                        type: "bot",
                        content: `ЁЯПЩя╕П ржврж╛ржХрж╛рж░ ржЖржмрж╣рж╛ржУржпрж╝рж╛\n\nЁЯМбя╕П рждрж╛ржкржорж╛рждрзНрж░рж╛: 28┬░C\nтШБя╕П ржЕржмрж╕рзНржерж╛: ржЖржВрж╢рж┐ржХ ржорзЗржШрж▓рж╛\nЁЯТз ржЖрж░рзНржжрзНрж░рждрж╛: 72%\nЁЯТи ржмрж╛ржпрж╝рзБ ржЧрждрж┐: 12 km/h`,
                    }
                    break

                case "forecast":
                    botResponse = {
                        id: (Date.now() + 1).toString(),
                        type: "bot",
                        content: `ЁЯУЕ ржЖржЧрж╛ржорзА ржжрж┐ржирзЗрж░ ржкрзВрж░рзНржмрж╛ржнрж╛рж╕ (ржврж╛ржХрж╛)\n\nЁЯУЖ ржЖржЧрж╛ржорзАржХрж╛рж▓: 26-30┬░C, ржмрзГрж╖рзНржЯрж┐рж░ рж╕ржорзНржнрж╛ржмржирж╛ 40%\nЁЯУЖ ржкрж░рзЗрж░ ржжрж┐ржи: 25-29┬░C, ржорзЗржШрж▓рж╛\nЁЯУЖ рждрж┐ржи ржжрж┐ржи ржкрж░: 27-31┬░C, рж░рзМржжрзНрж░рзЛржЬрзНржЬрзНржмрж▓`,
                    }
                    break

                case "awareness":
                    botResponse = {
                        id: (Date.now() + 1).toString(),
                        type: "bot",
                        content: "рж╕ржЪрзЗрждржирждрж╛ ржмрж┐рж╖ржпрж╝ ржмрзЗржЫрзЗ ржирж┐ржи:",
                        options: AWARENESS_OPTIONS,
                    }
                    break

                case "flood":
                    botResponse = {
                        id: (Date.now() + 1).toString(),
                        type: "bot",
                        content: `ЁЯУШ ржмржирзНржпрж╛ рж╕ржЪрзЗрждржирждрж╛ ржЧрж╛ржЗржб\n\nтЬУ ржирж┐рж░рж╛ржкржж рж╕рзНржерж╛ржирзЗ ржпрж╛ржи\nтЬУ ржЬрж░рзБрж░рж┐ рж╕рж╛ржоржЧрзНрж░рзА ржкрзНрж░рж╕рзНрждрзБржд рж░рж╛ржЦрзБржи\nтЬУ рж╕рзНржерж╛ржирзАржпрж╝ ржХрж░рзНрждрзГржкржХрзНрж╖рзЗрж░ ржирж┐рж░рзНржжрзЗрж╢ржирж╛ ржЕржирзБрж╕рж░ржг ржХрж░рзБржи\nтЬУ ржкрж░рж┐ржмрж╛рж░рзЗрж░ рж╕рж╛ржерзЗ ржпрзЛржЧрж╛ржпрзЛржЧ рж░рж╛ржЦрзБржи`,
                    }
                    break

                case "cyclone":
                    botResponse = {
                        id: (Date.now() + 1).toString(),
                        type: "bot",
                        content: `ЁЯУШ ржШрзВрж░рзНржгрж┐ржЭржбрж╝ рж╕ржЪрзЗрждржирждрж╛ ржЧрж╛ржЗржб\n\nтЬУ ржШрж░рзЗрж░ ржнрж┐рждрж░рзЗ ржерж╛ржХрзБржи\nтЬУ ржЬрж╛ржирж╛рж▓рж╛ ржПржмржВ ржжрж░ржЬрж╛ ржмржирзНржз ржХрж░рзБржи\nтЬУ рж╢ржХрзНрждрж┐рж╢рж╛рж▓рзА ржмрж╛рждрж╛рж╕ ржерзЗржХрзЗ ржжрзВрж░рзЗ ржерж╛ржХрзБржи\nтЬУ ржЬрж░рзБрж░рж┐ рж╕рзЗржмрж╛ ржиржорзНржмрж░ рж╕ржВрж░ржХрзНрж╖ржг ржХрж░рзБржи`,
                    }
                    break

                case "heatwave":
                    botResponse = {
                        id: (Date.now() + 1).toString(),
                        type: "bot",
                        content: `ЁЯУШ рждрж╛ржкржкрзНрж░ржмрж╛рж╣ рж╕ржЪрзЗрждржирждрж╛ ржЧрж╛ржЗржб\n\nтЬУ ржкрзНрж░ржЪрзБрж░ ржкрж╛ржирж┐ ржкрж╛ржи\nтЬУ рж╣рж╛рж▓ржХрж╛ рж░ржЩрзЗрж░ ржкрзЛрж╢рж╛ржХ ржкрж░рзБржи\nтЬУ ржжрзБржкрзБрж░рзЗ ржмрж╛ржЗрж░рзЗ ржпрж╛ржУржпрж╝рж╛ ржПржбрж╝рж┐ржпрж╝рзЗ ржЪрж▓рзБржи\nтЬУ ржмржпрж╝рж╕рзНржХ ржПржмржВ рж╢рж┐рж╢рзБржжрзЗрж░ ржпрждрзНржи ржирж┐ржи`,
                    }
                    break

                case "clinics":
                    botResponse = {
                        id: (Date.now() + 1).toString(),
                        type: "bot",
                        content: `ЁЯПе ржврж╛ржХрж╛ рж╢рж╣рж░рзЗрж░ ржХрзНрж▓рж┐ржирж┐ржХ\n\n1. ржврж╛ржХрж╛ ржорзЗржбрж┐ржХрзЗрж▓ ржХрж▓рзЗржЬ рж╣рж╛рж╕ржкрж╛рждрж╛рж▓\n   ЁЯУН рж╢рж╛рж╣ржмрж╛ржЧ, ржврж╛ржХрж╛\n   тШОя╕П +880-2-9661051\n\n2. ржмрж╛рж░ржбрзЗржо ржЬрзЗржирж╛рж░рзЗрж▓ рж╣рж╛рж╕ржкрж╛рждрж╛рж▓\n   ЁЯУН ржкрж╛ржирзНржержкрже, ржврж╛ржХрж╛\n   тШОя╕П +880-2-8611881\n\n3. ржЗржЙржирж╛ржЗржЯрзЗржб рж╣рж╛рж╕ржкрж╛рждрж╛рж▓\n   ЁЯУН ржЧрзБрж▓рж╢рж╛ржи, ржврж╛ржХрж╛\n   тШОя╕П +880-2-9884400`,
                    }
                    break

                case "faqs":
                    botResponse = {
                        id: (Date.now() + 1).toString(),
                        type: "bot",
                        content: "FAQs ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи:",
                        options: FAQ_OPTIONS,
                    }
                    break

                case "faq_about":
                    botResponse = {
                        id: (Date.now() + 1).toString(),
                        type: "bot",
                        content: `ЁЯМР ржорзЗржШржмржирзНржзрзБ рж╕ржорзНржкрж░рзНржХрзЗ\n\nржорзЗржШржмржирзНржзрзБ рж╣рж▓рзЛ ржПржХржЯрж┐ ржЖржмрж╣рж╛ржУржпрж╝рж╛ рждржерзНржп ржУ рж╕ржЪрзЗрждржирждрж╛ ржкрзНрж▓рзНржпрж╛ржЯржлрж░рзНржо ржпрж╛ ржЖржкржирж╛ржХрзЗ рж░рж┐ржпрж╝рзЗрж▓-ржЯрж╛ржЗржо ржЖржмрж╣рж╛ржУржпрж╝рж╛ ржЖржкржбрзЗржЯ ржПржмржВ ржкрзНрж░рж╛ржХрзГрждрж┐ржХ ржжрзБрж░рзНржпрзЛржЧ рж╕ржорзНржкрж░рзНржХрзЗ рж╕ржЪрзЗрждржирждрж╛ ржкрзНрж░ржжрж╛ржи ржХрж░рзЗред`,
                    }
                    break

                case "faq_data":
                    botResponse = {
                        id: (Date.now() + 1).toString(),
                        type: "bot",
                        content: `ЁЯУК ржбрзЗржЯрж╛ ржЙрзОрж╕\n\nржЖржорж╛ржжрзЗрж░ ржЖржмрж╣рж╛ржУржпрж╝рж╛ рждржерзНржп ржЖрж╕рзЗ:\nтЬУ OpenWeather API\nтЬУ ржЖржирзНрждрж░рзНржЬрж╛рждрж┐ржХ ржЖржмрж╣рж╛ржУржпрж╝рж╛ рж╕ржВрж╕рзНржерж╛\nтЬУ рж╕рзНржерж╛ржирзАржпрж╝ ржЖржмрж╣рж╛ржУржпрж╝рж╛ ржХрзЗржирзНржжрзНрж░`,
                    }
                    break

                case "faq_contact":
                    botResponse = {
                        id: (Date.now() + 1).toString(),
                        type: "bot",
                        content: `тШОя╕П ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржи\n\nржЗржорзЗржЗрж▓: support@meghbondhu.com\nржлрзЛржи: +880-2-XXXXXXXX\nржУржпрж╝рзЗржмрж╕рж╛ржЗржЯ: www.meghbondhu.com`,
                    }
                    break

                default:
                    botResponse = {
                        id: (Date.now() + 1).toString(),
                        type: "bot",
                        content: "ржЖржорж┐ ржмрзБржЭрждрзЗ ржкрж╛рж░рж┐ржирж┐ред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржорзЗржирзБ ржерзЗржХрзЗ ржПржХржЯрж┐ ржмрж┐ржХрж▓рзНржк ржмрзЗржЫрзЗ ржирж┐ржиред",
                        options: MENU_OPTIONS,
                    }
            }

            setMessages((prev) => [...prev, botResponse])
            setLoading(false)
        }, 500)
    }

    const handleSendMessage = () => {
        if (input.trim()) {
            const userMessage: Message = {
                id: Date.now().toString(),
                type: "user",
                content: input,
            }

            setMessages((prev) => [...prev, userMessage])
            setInput("")
            setLoading(true)

            setTimeout(() => {
                const botResponse: Message = {
                    id: (Date.now() + 1).toString(),
                    type: "bot",
                    content: "ржЖржорж┐ ржмрзБржЭрждрзЗ ржкрж╛рж░рж┐ржирж┐ред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржорзЗржирзБ ржерзЗржХрзЗ ржПржХржЯрж┐ ржмрж┐ржХрж▓рзНржк ржмрзЗржЫрзЗ ржирж┐ржиред",
                    options: MENU_OPTIONS,
                }

                setMessages((prev) => [...prev, botResponse])
                setLoading(false)
            }, 500)
        }
    }

    return (
        <div className="flex items-center justify-center min-h-screen p-4 bg-gray-100">
            <div className="w-full max-w-2xl h-screen max-h-screen md:max-h-[600px] flex flex-col shadow-2xl rounded-lg overflow-hidden bg-white">
                {/* Header */}
                <div className="bg-gradient-to-r from-blue-600 to-cyan-600 text-white p-4">
                    <div className="flex items-center gap-3">
                        <Cloud className="w-6 h-6" />
                        <div>
                            <h1 className="text-xl font-bold">ржорзЗржШржмржирзНржзрзБ ржмржЯ</h1>
                            <p className="text-sm text-blue-100">ржЖржмрж╣рж╛ржУржпрж╝рж╛ ржУ рж╕ржЪрзЗрждржирждрж╛ рж╕рж╣рж╛ржпрж╝ржХ</p>
                        </div>
                    </div>
                </div>

                {/* Messages Container */}
                <div className="flex-1 overflow-y-auto p-4 space-y-4 bg-gray-50">
                    {messages.map((message) => (
                        <div key={message.id} className={`flex ${message.type === "user" ? "justify-end" : "justify-start"}`}>
                            <div
                                className={`max-w-xs lg:max-w-md px-4 py-3 rounded-lg ${
                                    message.type === "user"
                                        ? "bg-blue-600 text-white rounded-br-none"
                                        : "bg-white text-gray-800 border border-gray-200 rounded-bl-none"
                                }`}
                            >
                                <p className="text-sm whitespace-pre-wrap">{message.content}</p>

                                {message.options && (
                                    <div className="mt-3 space-y-2">
                                        {message.options.map((option, idx) => (
                                            <button
                                                key={idx}
                                                onClick={() => handleOptionClick(option.action)}
                                                disabled={loading}
                                                className={`w-full text-left px-3 py-2 rounded text-sm font-medium transition-colors ${
                                                    message.type === "user"
                                                        ? "bg-blue-500 border border-blue-400 text-white hover:bg-blue-600 disabled:opacity-50"
                                                        : "bg-gray-100 border border-gray-300 text-gray-800 hover:bg-gray-200 disabled:opacity-50"
                                                }`}
                                            >
                                                {option.label}
                                            </button>
                                        ))}
                                    </div>
                                )}
                            </div>
                        </div>
                    ))}

                    {loading && (
                        <div className="flex justify-start">
                            <div className="bg-white text-gray-800 border border-gray-200 px-4 py-3 rounded-lg rounded-bl-none">
                                <div className="flex gap-2">
                                    <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                                    <div
                                        className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"
                                        style={{ animationDelay: "0.1s" }}
                                    ></div>
                                    <div
                                        className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"
                                        style={{ animationDelay: "0.2s" }}
                                    ></div>
                                </div>
                            </div>
                        </div>
                    )}

                    <div ref={messagesEndRef} />
                </div>

                {/* Input Area */}
                <div className="border-t border-gray-200 p-4 bg-white">
                    <div className="flex gap-2">
                        <input
                            type="text"
                            placeholder="ржмрж╛рж░рзНрждрж╛ рж▓рж┐ржЦрзБржи..."
                            value={input}
                            onChange={(e) => setInput(e.target.value)}
                            onKeyPress={(e) => e.key === "Enter" && handleSendMessage()}
                            disabled={loading}
                            className="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-50"
                        />
                        <button
                            onClick={handleSendMessage}
                            disabled={loading || !input.trim()}
                            className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg font-medium transition-colors disabled:opacity-50 flex items-center gap-2"
                        >
                            <Send className="w-4 h-4" />
                        </button>
                    </div>
                </div>
            </div>
        </div>
    )
}
